#include <stdio.h>
#include <stdlib.h>

#include <opencv/cv.h>
#include <opencv/highgui.h>

#include <emmintrin.h> //Librerias para las instrucciones SSE2

/*
    __m128i B = _mm_set1_epi8 (char A);
    __m128i A = _mm_load_si128 (__m128i const *P); // P alineado a 16 Bytes
    __m128i A = _mm_loadu_si128 (__m128i const *P); // P no alineado a 16 Bytes
    __m128i C = _mm_subs_epu8 (__m128i A, __m128i B);
    _mm_store_si128 (__m128i *P, __m128i B); // P alineado a 16 Bytes
    _mm_storeu_si128 (__m128i *P, __m128i B); // P no alineado a 16 Bytes
 *  __m128i _mm_and_si128 (__m128i A, __m128iB);
 *  __m128i _mm_or_si128 (__m128i A, __m128iB);
 *  __m128i _mm_set1_epi32 (int A);
 */


int main(int argc, char** argv) {

    if (argc != 2) {
        printf("Usage: %s image_file_name\n", argv[0]);
        return EXIT_FAILURE;
    }

    //CV_LOAD_IMAGE_COLOR = 1 forces the resultant IplImage to be colour.
    //CV_LOAD_IMAGE_GRAYSCALE = 0 forces a greyscale IplImage.
    //CV_LOAD_IMAGE_UNCHANGED = -1
    IplImage* ImgOrigen = cvLoadImage(argv[1], CV_LOAD_IMAGE_ANYCOLOR | CV_LOAD_IMAGE_UNCHANGED);
    IplImage* ImgVerde = cvCloneImage(ImgOrigen);
    IplImage* ImgAmarillo = cvCloneImage(ImgOrigen);

    //Se crea y muestra la imagen origen
    cvNamedWindow(argv[1], CV_WINDOW_NORMAL);
    cvShowImage(argv[1], ImgOrigen);
    cvWaitKey(0);

    //Creamos los registros donde se almacenan los dos colores con _mm_set1_epi32
    __m128i verdeAndroid = _mm_set1_epi32(0x00A4C639);
    __m128i amarilloMinion = _mm_set1_epi32(0x00FED55D);

    int row, col;
    //Recorremos la imagen origen y creamos los punteros para img verde y amarillo
    for (row = 0; row < ImgOrigen->height; row++) {
        __m128i *pImgVerde = (__m128i *) (ImgVerde->imageData + row * ImgVerde->widthStep);
        __m128i *pImgAmarillo = (__m128i *) (ImgAmarillo->imageData + row * ImgAmarillo->widthStep);

        //Para cada columna asignamos al puntero de cada imagen los registros de color verde y amarillo
        for (col = 0; col < ImgOrigen->widthStep; col += 16) {
            *pImgVerde++ = verdeAndroid;
            *pImgAmarillo++ = amarilloMinion;
        }
    }

    //Creamos y mostramos la imagen verde
    cvNamedWindow("verde", CV_WINDOW_NORMAL);
    cvShowImage("verde", ImgVerde);
    cvWaitKey(0);

    //Creamos y mostramos la imagen amarilla
    cvNamedWindow("amarillo", CV_WINDOW_NORMAL);
    cvShowImage("amarillo", ImgAmarillo);
    cvWaitKey(0);

    // memory release for img before exiting the application
    cvReleaseImage(&ImgOrigen);
    cvReleaseImage(&ImgVerde);
    cvReleaseImage(&ImgAmarillo);

    // Self-explanatory
    cvDestroyWindow(argv[1]);
    cvDestroyWindow("verde");
    cvDestroyWindow("amarillo");

    return EXIT_SUCCESS;

}