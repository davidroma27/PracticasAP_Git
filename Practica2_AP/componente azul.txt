#include <stdio.h>
#include <stdlib.h>

#include <opencv/cv.h>
#include <opencv/highgui.h>

int main(int argc, char** argv) {

    if (argc != 2) {
        printf("Usage: %s image_file_name\n", argv[0]);
        return EXIT_FAILURE;
    }

    //CV_LOAD_IMAGE_COLOR = 1 forces the resultant IplImage to be colour.
    //CV_LOAD_IMAGE_GRAYSCALE = 0 forces a greyscale IplImage.
    //CV_LOAD_IMAGE_UNCHANGED = -1
    IplImage* Img1 = cvLoadImage(argv[1], CV_LOAD_IMAGE_COLOR);
    
    // Always check if the program can find a file
    if (!Img1) {
        printf("Error: fichero %s no leido\n", argv[1]);
        return EXIT_FAILURE;
    }

    //Crea una imagen con las caracteristicas de la imagen de entrada
    IplImage *ImgMod = cvCreateImage(cvSize(Img1->width, Img1->height),Img1->depth,Img1->nChannels);
    
    if (!ImgMod) {
        printf("Error: Creando nueva imagen\n");
        return EXIT_FAILURE;
    }
    
    //Creamos el bucle que recorre la imagen
    unsigned int row, col;
    unsigned char *pImg;
    unsigned char *pImgMod;
    
    //Para cada fila recorre las columnas de cada imagen
    for(row=0; row<Img1->height; row++){
        pImg = (unsigned char*) (Img1->imageData + (row*Img1->widthStep));
        //Casteamos para que tenga un valor de 255bits y alineamos la imagen al principio de cada fila con widthStep
        pImgMod = (unsigned char*) (ImgMod->imageData + (row*ImgMod->widthStep));
        for(col=0; col<Img1->width; col++){
            
            *pImgMod = *pImg; //Cada dato que lee de pImg lo iguala en pImgMod (en este caso la componente azul)
            pImgMod++;
            pImg++;
            
            //Componente verde a 0
            *pImgMod++ = 0;
            pImg++;
            
            //Componente roja a 0
            *pImgMod++ = 0;
            pImg++;
        }
    }
    
    // a visualization window is created with title 'image'
    cvNamedWindow(argv[1], CV_WINDOW_NORMAL);
    // img is shown in 'image' window
    cvShowImage(argv[1], Img1);
    cvWaitKey(0);

    //Creamos la ventana para la imagen azul
    cvNamedWindow("Blue", CV_WINDOW_NORMAL);
    cvShowImage("Blue", ImgMod);
    cvWaitKey(0);
    
    // memory release for img before exiting the application
    cvReleaseImage(&Img1);
    cvReleaseImage(&ImgMod);
    
    // Self-explanatory
    cvDestroyWindow(argv[1]);
    cvDestroyWindow("Blue");

    return EXIT_SUCCESS;

}